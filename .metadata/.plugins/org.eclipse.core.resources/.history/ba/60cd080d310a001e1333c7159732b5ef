package exercise3;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

public class Client {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
            	//run client frame
                new ClientFrame();
            }
        });
    }
}

//client frame
class ClientFrame extends JFrame {

    private JTextField textField;
    private JTextArea textArea;
    private JButton sendButton;

    private Socket socket;
    private PrintWriter writer;
    private BufferedReader reader;

    public ClientFrame() {
        setTitle("Client");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLayout(new BorderLayout());

        //create text field, area and button send
        textField = new JTextField();
        textArea = new JTextArea();
        sendButton = new JButton("Send");

        //set the layout
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        panel.add(textField, BorderLayout.CENTER);
        panel.add(sendButton, BorderLayout.EAST);

        add(new JScrollPane(textArea), BorderLayout.CENTER);
        add(panel, BorderLayout.SOUTH);

        //when clicked, send text
        sendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sendMessage();
            }
        });

        setVisible(true);

        connectToServer();
    }

    private void connectToServer() {
        try {
        	//connect to server at port 4228
            socket = new Socket("localhost", 4228);
            //write data to server
            writer = new PrintWriter(socket.getOutputStream(), true);
            //read data from server
            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            //if connected, print
            appendToTextArea("Connected to server.");

            
            receiveMessage();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

  //get text from text field
    private void sendMessage() {
    	
        String message = textField.getText();
        writer.println(message);
        textField.setText("");
    }

    private void receiveMessage() {
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (true) {
                        String message = reader.readLine();
                        appendToTextArea("Server: " + message);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        thread.start();
    }

    private void appendToTextArea(String message) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                textArea.append(message + "\n");
            }
        });
    }
}
